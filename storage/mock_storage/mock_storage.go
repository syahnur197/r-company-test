// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/syahnur197/rakuten/storage"
)

// MockRakutenStore is a mock of RakutenStore interface.
type MockRakutenStore struct {
	ctrl     *gomock.Controller
	recorder *MockRakutenStoreMockRecorder
}

// MockRakutenStoreMockRecorder is the mock recorder for MockRakutenStore.
type MockRakutenStoreMockRecorder struct {
	mock *MockRakutenStore
}

// NewMockRakutenStore creates a new mock instance.
func NewMockRakutenStore(ctrl *gomock.Controller) *MockRakutenStore {
	mock := &MockRakutenStore{ctrl: ctrl}
	mock.recorder = &MockRakutenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRakutenStore) EXPECT() *MockRakutenStoreMockRecorder {
	return m.recorder
}

// CreateCurrencyRate mocks base method.
func (m *MockRakutenStore) CreateCurrencyRate(ctx context.Context, rate storage.Rate) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrencyRate", ctx, rate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCurrencyRate indicates an expected call of CreateCurrencyRate.
func (mr *MockRakutenStoreMockRecorder) CreateCurrencyRate(ctx, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrencyRate", reflect.TypeOf((*MockRakutenStore)(nil).CreateCurrencyRate), ctx, rate)
}

// CreateCurrencyRatesTable mocks base method.
func (m *MockRakutenStore) CreateCurrencyRatesTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrencyRatesTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCurrencyRatesTable indicates an expected call of CreateCurrencyRatesTable.
func (mr *MockRakutenStoreMockRecorder) CreateCurrencyRatesTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrencyRatesTable", reflect.TypeOf((*MockRakutenStore)(nil).CreateCurrencyRatesTable))
}

// GetAnalyzedCurrencyRates mocks base method.
func (m *MockRakutenStore) GetAnalyzedCurrencyRates(ctx context.Context) ([]storage.AnalyzedRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalyzedCurrencyRates", ctx)
	ret0, _ := ret[0].([]storage.AnalyzedRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyzedCurrencyRates indicates an expected call of GetAnalyzedCurrencyRates.
func (mr *MockRakutenStoreMockRecorder) GetAnalyzedCurrencyRates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzedCurrencyRates", reflect.TypeOf((*MockRakutenStore)(nil).GetAnalyzedCurrencyRates), ctx)
}

// GetCurrencyRates mocks base method.
func (m *MockRakutenStore) GetCurrencyRates(ctx context.Context, filter storage.CurrencyFilter) ([]storage.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRates", ctx, filter)
	ret0, _ := ret[0].([]storage.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRates indicates an expected call of GetCurrencyRates.
func (mr *MockRakutenStoreMockRecorder) GetCurrencyRates(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRates", reflect.TypeOf((*MockRakutenStore)(nil).GetCurrencyRates), ctx, filter)
}
